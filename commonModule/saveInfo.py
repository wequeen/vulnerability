#!/usr/bin/env python
#-*- coding:utf-8 -*-
#@Time:2020/6/1618:17
#@Author:mery
#@File:saveInfo.py

import sqlite3

import re

from commonModule.get_cve_no import get_cveNo
from urllib.parse import urlencode

from commonModule.get_html import parse_html
from util.queryDB import query
from commonModule.get_cnnvd_no import get_cnnvd
from commonModule.get_cnnvd_detail import get_detail
import time

#将根据关键字查询获取到的cve编号写入数据库
def save_cve_no(cveNo, name, tableName):
    conn = sqlite3.connect("../bug.db")
    cur = conn.cursor()
    for no in cveNo:
        sqlQuery = "select * from '%s' where cveNo is '%s'"%(tableName,no)
        cur.execute(sqlQuery)
        queryResults = cur.fetchone()
        if queryResults == None:
             sql = "insert into '%s' (nameInfo,cveNo) values('%s','%s')"%(tableName,name,no)
             cur.execute(sql)
             conn.commit()
        else:
            results = cur.fetchall()
            for row in results:
                print(row[0])
    conn.close()

#循环遍历获取的所有的CVE编号
def cycle_save_cve_no(keywords,tableName):
    base_url = "http://cve.mitre.org/cgi-bin/cvekey.cgi?"
    for keyword in keywords:
        params = {
            "keyword": keyword
        }
        url = base_url + urlencode(params)
        cveNo = get_cveNo(url)
        print(cveNo)
        save_cve_no(cveNo, keyword,tableName)

#将获取到的CNNVD漏洞详情写入数据库
def save_cnnvd_detail(tableName):
    conn = sqlite3.connect("../bug.db")
    cur = conn.cursor()
    sql = "select cveNo from '%s' where cnnvdNo is null or description is ''" % (tableName)
    queryResults = query(sql)
    try:
        for row in queryResults:
            cveNo = row[0]
            print(cveNo)
            result = get_cnnvd(cveNo)
            time.sleep(1)
            # print(result)
            cnn_no = result.select('#vulner_0 > p > a')
            print(len(cnn_no))
            if len(cnn_no) > 0:
                cnnno = cnn_no[0].get_text()
                print(cnnno)
                detail = get_detail(cnnno)
                if type(detail) == None:
                    print("无法收集漏洞信息")
                else:
                    print(detail)
                    time.sleep(1)
                    # print(detail)
                    title = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div.detail_xq.w770 > h2')
                    print(type(title))
                    print(len(title))
                    title_content = title[0].get_text().strip().replace("'","")
                    print(title_content)
                    level = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div.detail_xq.w770 > ul > li:nth-child(2) > a')
                    level_content = level[0].get_text().strip()
                    print(level_content)
                    vulType = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div.detail_xq.w770 > ul > li:nth-child(4) > a')
                    vulType_content = vulType[0].get_text().strip()
                    print(vulType_content)
                    threadType = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div.detail_xq.w770 > ul > li:nth-child(6) > a')
                    threadType_content = ""
                    if len(threadType) > 0:
                        threadType_content = threadType[0].get_text().strip()
                    print(threadType_content)
                    description = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div:nth-child(4) > p:nth-child(4)')
                    print(len(description))
                    description_content = ""
                    if len(description) > 0:
                        description_content = description[0].get_text().strip().replace('\\','')
                        print(description_content)
                    description_add = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div:nth-child(4) > p:nth-child(3)')
                    print(len(description_add))
                    description_add_content = ""
                    if len(description_add) > 0:
                        description_add_content = description_add[0].get_text().strip().replace('\\', '')
                        print(description_add_content)

                    description_content = description_add_content + description_content
                    notice_content = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div:nth-child(5) > p:nth-child(3)')
                    print(notice_content)
                    content = ""
                    if len(notice_content) > 0:
                        content = notice_content[0].get_text().strip()
                        content = content.replace("'","")
                    print(content)
                    notice_url = detail.select('body > div.container.m_t_10 > div > div.fl.w770 > div:nth-child(5) > p.ldgg')
                    print(type(notice_url))
                    notice_url_content = ""
                    if len(notice_url) > 0:
                        notice_url_content = notice_url[0].get_text().strip().replace("'","")
                    notice = content + notice_url_content
                    print(notice)
                    annUrl = "http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=%s"%(cnnno)
                    # print(annUrl)
                    sql = "update '%s' set title = '%s',description = '%s',grade = '%s',vulType = '%s',cnnvdNo = '%s',annUrl = '%s'," \
                          "notice = '%s',threatType = '%s' where cveNo = '%s'"%(tableName,title_content,description_content,level_content,vulType_content,cnnno,annUrl,notice,threadType_content,cveNo)
                    print(sql)
                    cur.execute(sql)
                    print("已执行数据库插入")
                    conn.commit()
            else:
                print("没有该漏洞")

    except Exception as e:
        print("Error", e.args)
    finally:
        conn.close()
        print("数据库已关闭")
        # print("Error",e.args)

#保存服务器的相关漏洞信息到数据表serverInfo中
def saveServer():
    keywords = ["openresty","tomcat","nginx","Apache","lighttpd","webSphere","IIS","Weblogic","tongweb","BOA","Jigsaw","RabbitMQ","miniO"]
    cycle_save_cve_no(keywords,"serverInfo")
    save_cnnvd_detail("serverInfo")

#保存数据库的相关漏洞信息到数据库表dbInfo中
def saveDB():
    keywords_db = ["oracle mysql", "postgreSQL", "mongoDB", "redis", "oracle database server", "microsoft sql sever", "Elasticsearch",
                   "influxDB"]
    cycle_save_cve_no(keywords_db, "dbInfo")
    save_cnnvd_detail("dbInfo")

#保存插件的相关漏洞信息到数据库表toolsInfo中
def saveTool():
    keywords_db = ["Apache Ant", "OpenConnect", "Microsoft Visual Studio Code"]
    cycle_save_cve_no(keywords_db, "toolsInfo")
    save_cnnvd_detail("toolsInfo")

#保存协议的相关漏洞信息到数据库表protocloInfo中
def saveProtocol():
    keywords_db = ["TLS", "OpenSSH"]
    cycle_save_cve_no(keywords_db, "protocolInfo")
    save_cnnvd_detail("protocolInfo")

#保存函数及语言相关的漏洞信息到数据库表functionInfo中
def saveFunction():
    keywords_db = ["Fastjson", "Haxx libcurl","jQuery","PHP","ical4j","jasper-el.jar","ecj","unoil","attoparser","commons-collections","commons-beanutils","commons-compress","poi-ooxml-schemas","xmlbeans"]
    cycle_save_cve_no(keywords_db, "functionInfo")
    save_cnnvd_detail("functionInfo")

#保存操作系统相关的漏洞信息到数据库表operationInfo中
def saveOperation():
    keywords_db = ["OPENWRT/LEDE", "Linux kernel","IBM i","Microsoft Windows"]
    cycle_save_cve_no(keywords_db, "operationInfo")
    save_cnnvd_detail("operationInfo")

#保存常用组件的相关漏洞信息到数据库表frameIngo中
def saveFrame():
    keywords_db = ["Apache Shiro", "VMware Spring Security","Red Hat Hibernate ORM"]
    cycle_save_cve_no(keywords_db, "frameInfo")
    save_cnnvd_detail("frameInfo")

#保存加密算法相关的漏洞信息到数据库表encryAlgoriithmInfo中
def saveEncryAlgorithm():
    keywords_db = ["Triple DES", "DES"]
    cycle_save_cve_no(keywords_db, "encryAlgoriithmInfo")
    save_cnnvd_detail("encryAlgoriithmInfo")

# def main():
#     save_cnnvd_detail("dbInfo")
#
# if __name__=="__main__":
#     main()