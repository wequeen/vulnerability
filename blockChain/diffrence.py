#!/usr/bin/env python
#-*- coding:utf-8 -*-
#@Time:2020/6/1713:59
#@Author:mery
#@File:diffrence.py
import time
from urllib.parse import urlencode
import sqlite3
import requests
from blockChain.detail import get_detail
from util.queryDB import orign_count

#请求浏览器获取响应结果
def askUrl(url,refer):
    #print(proxy)
    head = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko",
        "Referer":refer}
    try:
        response = requests.get(url,headers=head)
        if response.status_code == 200:
            #print(response.json())
            return response.json()
        #time.sleep(1)
    except requests.exception.ConnnectionError as e:
       print("Error",e.args)



baseurl = "https://bc.cnvd.org.cn/cnvdApi/vul/list?"

#获取写入数据库中区块链相关漏洞的总数
def count_batabase(tables):
    count_total = 0
    for table in tables:
        sqlQuery = "select * from '%s'" % (table)
        orignCount = orign_count(sqlQuery)
        count_total = count_total + orignCount
    return count_total

#获取与区块链漏洞字库中在数据库未找到的漏洞id
def get_id_difference(vulType):
    nums=[]
    #1.抓取共联漏洞页面数据
    response = get_page(1,vulType)
    result = response.get("result")
    count = result.get("count")
    print("当前 %s 漏洞数 %s条"%(vulType,count))
    tables = ["otherChain","outsideChain","pubChain","uniChain"]
    count_database = count_batabase(tables)
    print("数据库中统计漏洞数 %s 条"%(count_database))
    if count > count_database:
        pageCount = count // 10
            #print(pageCount)

        for page in range(1,pageCount + 1):
             response = get_page(page,vulType)
             result = response.get("result")
             data = result.get("data")
             print(data)
             for index in range(0,10):
                 num = data[index].get("num")
                 result = getNumsNo(num,"pubChain")
                 if result == None:
                     result =getNumsNo(num, "outsideChain")
                     if result == None:
                         result = getNumsNo(num, "uniChain")
                         if result == None:
                             nums.append(num)
             #print(nums)
             time.sleep(2)
        response = get_page(pageCount + 1, vulType)
        result = response.get("result")
        data = result.get("data")
        for index in range(0, count % 10):
            num = data[index].get("num")
            result = getNumsNo(num, "pubChain")
            if result == None:
                result = getNumsNo(num, "outsideChain")
                if result == None:
                    result = getNumsNo(num, "uniChain")
                    if result == None:
                        nums.append(num)
    else:
        print("没有新增漏洞")
    return nums

#按照页码查询当某漏洞类型下的漏洞
def get_page(page,vulType):
    params = {
        'pageSize': '10',
        'pageNum': page,
        'vulType': vulType,
        'vulLevel':'',
        'period': '',
        'keyword': ''
    }
    url = baseurl + urlencode(params)
    print(url)
    #proxy_dict = userIp();
    result = askUrl(url,"https://bc.cnvd.org.cn/loopholeList")
    time.sleep(5)
    return result


#查询某数据表中num为特定值的结果集
def getNumsNo(num,tableName):
    result = []
    conn = sqlite3.connect("../bug.db")
    cur = conn.cursor()
    sqlQuery = "select * from '%s' where num is '%s'" % (tableName, num)
    cur.execute(sqlQuery)
    queryResults = cur.fetchone()
    return queryResults





